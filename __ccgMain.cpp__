// CS 4318, spring 2023
// Agent Challenge 4: Cricket card game
//
// Here's the main function that plays all agents against each other and
// summarizes the results.

#include "ccg.h"
#include "json.hpp"

extern const int numAgents;
extern int (*agentFunc[])(Hand, Card, bool, const MatchState &);
extern string agentStr[];

MatchState playCricketCardGameMatch(
    int (*agentA)(Hand, Card, bool, const MatchState &),
    int (*agentB)(Hand, Card, bool, const MatchState &), bool printAllDetails);

int main() {
  CricketStats battingStats[numAgents], bowlingStats[numAgents];
  int i, j, k, numAWon, numBWon, numDrawn, numDraws[numAgents],
      numLosses[numAgents], numTied, numTies[numAgents], numWins[numAgents],
      order[numAgents], pointsAsA[numAgents], pointsAsB[numAgents], temp;
  MatchState match;

  srandom(time(0));

  for (i = 0; i < numAgents; i += 1) {
    numWins[i] = 0;
    numLosses[i] = 0;
    numDraws[i] = 0;
    numTies[i] = 0;
    pointsAsA[i] = 0;
    pointsAsB[i] = 0;
  }
  for (i = 0; i < numAgents; i += 1) {
    for (j = 0; j < numAgents; j += 1) {
      if (i != j) {
        numAWon = 0;
        numBWon = 0;
        numDrawn = 0;
        numTied = 0;
        for (k = playExhibitionMatches ? 0 : 1; k <= 200; k += 1) {
          if (k == 0) {
            // cout << "Exhibition match:\n";
          }
          match = playCricketCardGameMatch(agentFunc[i], agentFunc[j], k == 0);
          if (k == 0) {
            // cout << "Official matches:\n";
          } else {
            switch (match.getResult()) {
              case aWin:
                numAWon += 1;
                numWins[i] += 1;
                pointsAsA[i] += pointsForWin;
                numLosses[j] += 1;
                pointsAsB[j] += pointsForLoss;
                break;
              case bWin:
                numBWon += 1;
                numLosses[i] += 1;
                pointsAsA[i] += pointsForLoss;
                numWins[j] += 1;
                pointsAsB[j] += pointsForWin;
                break;
              case drawnMatch:
                numDrawn += 1;
                numDraws[i] += 1;
                pointsAsA[i] += pointsForDraw;
                numDraws[j] += 1;
                pointsAsB[j] += pointsForDraw;
                break;
              case tiedMatch:
                numTied += 1;
                numTies[i] += 1;
                pointsAsA[i] += pointsForTie;
                numTies[j] += 1;
                pointsAsB[j] += pointsForTie;
                break;
            }
            battingStats[i].runs += match.getRuns(0);
            battingStats[i].wickets += match.getWickets(0);
            battingStats[i].balls += match.getBalls(0);
            bowlingStats[i].runs += match.getRuns(1);
            bowlingStats[i].wickets += match.getWickets(1);
            bowlingStats[i].balls += match.getBalls(1);
            battingStats[j].runs += match.getRuns(1);
            battingStats[j].wickets += match.getWickets(1);
            battingStats[j].balls += match.getBalls(1);
            bowlingStats[j].runs += match.getRuns(0);
            bowlingStats[j].wickets += match.getWickets(0);
            bowlingStats[j].balls += match.getBalls(0);
          }
        }
      }
    }
  }

  for (i = 0; i < numAgents; i += 1) {
    order[i] = i;
  }
  for (i = 0; i < numAgents - 1; i += 1) {
    for (j = i + 1; j < numAgents; j += 1) {
      if (pointsAsA[order[i]] + pointsAsB[order[i]] <
              pointsAsA[order[j]] + pointsAsB[order[j]] ||
          (pointsAsA[order[i]] + pointsAsB[order[i]] ==
               pointsAsA[order[j]] + pointsAsB[order[j]] &&
           agentStr[order[i]] > agentStr[order[j]])) {
        temp = order[i];
        order[i] = order[j];
        order[j] = temp;
      }
    }
  }
  nlohmann::json agentsArray = nlohmann::json::array();
  for (i = 0; i < numAgents; i += 1) {
    nlohmann::json agentData = {
        {"name", agentStr[order[i]]},
        {"points", pointsAsA[order[i]] + pointsAsB[order[i]]},
        {"pointsAsA", pointsAsA[order[i]]},
        {"pointsAsB", pointsAsB[order[i]]},
        {"numWins", numWins[order[i]]},
        {"numLosses", numLosses[order[i]]},
        {"numDraws", numDraws[order[i]]},
        {"numTies", numTies[order[i]]},
        {"battingRunsPerWicket",
         static_cast<double>(battingStats[order[i]].runs) /
             battingStats[order[i]].wickets},
        {"battingRunsPerHundredBalls",
         100 * static_cast<double>(battingStats[order[i]].runs) /
             battingStats[order[i]].balls},
        {"battingBallsPerWicket",
         static_cast<double>(battingStats[order[i]].balls) /
             battingStats[order[i]].wickets},
        {"bowlingRunsPerWicket",
         static_cast<double>(bowlingStats[order[i]].runs) /
             bowlingStats[order[i]].wickets

        },
        {"bowlingRunsPerHundredBalls",
         100 * static_cast<double>(bowlingStats[order[i]].runs) /
             bowlingStats[order[i]].balls

        },
        {"bowlingBallsPerWicket",
         static_cast<double>(bowlingStats[order[i]].balls) /
             bowlingStats[order[i]].wickets},
    };

    agentsArray.push_back(agentData);
  }
  std::cout << std::setw(4) << agentsArray << std::endl;
  return 0;
}

MatchState playCricketCardGameMatch(
    int (*agentA)(Hand, Card, bool, const MatchState &),
    int (*agentB)(Hand, Card, bool, const MatchState &), bool printAllDetails) {
  // Play a match of the cricket card game between given agents.
  Card battingCard, bowlingCard;
  Hand battingHand, bowlingHand, tempHand;
  int battingPlay, bowlingPlay, lastBowlingCardNumber;
  int (*battingAgent)(Hand, Card, bool, const MatchState &);
  int (*bowlingAgent)(Hand, Card, bool, const MatchState &);
  MatchState match;

  battingAgent = agentA;
  bowlingAgent = agentB;
  while (match.stillPlaying()) {
    lastBowlingCardNumber = bowlingCard.getNumber();
    bowlingPlay = (*bowlingAgent)(bowlingHand, bowlingCard, false, match);
    bowlingCard = bowlingHand.getCard(bowlingPlay);
    bowlingHand.randomizeCard(bowlingPlay);
    if (bowlingCard.getNumber() == lastBowlingCardNumber) {
      match.scoreRuns(1);
    } else if (bowlingCard.getNumber() == lastBowlingCardNumber + 1) {
      match.scoreRuns(numRuns(lastBowlingCardNumber));
    } else {
      battingPlay = (*battingAgent)(battingHand, bowlingCard, true, match);
      battingCard = battingHand.getCard(battingPlay);
      battingHand.randomizeCard(battingPlay);
      if (battingCard.getSuit() == bowlingCard.getSuit()) {
        match.scoreRuns(
            numRuns(battingCard.getNumber() - bowlingCard.getNumber()));
      } else if (battingCard.getNumber() >= bowlingCard.getNumber()) {
        match.scoreRuns(0);
      } else {
        match.takeWicket();
      }
    }
    if (!match.isInFirstInnings() && match.getBalls(1) == 0) {
      battingAgent = agentB;
      bowlingAgent = agentA;
      tempHand = battingHand;
      battingHand = bowlingHand;
      bowlingHand = tempHand;
    }
  }

  return match;
}
